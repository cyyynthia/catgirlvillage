plugins {
	id 'eclipse'
	id 'idea'
	id 'maven-publish'
	id 'net.minecraftforge.gradle' version '[6.0,6.2)'
	id 'org.spongepowered.mixin' version '0.7.+'
}

version = mod_version
group = mod_group_id

base {
	archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
	mappings channel: mapping_channel, version: mapping_version
	copyIdeResources = true

	runs {
		// applies to all the run configs below
		configureEach {
			workingDirectory project.file('run')

			property 'forge.logging.markers', 'REGISTRIES'
			property 'forge.logging.console.level', 'debug'

			mods {
				"${mod_id}" { source sourceSets.main }
			}
		}

		client {
			property 'forge.enabledGameTestNamespaces', mod_id
		}

		server {
			property 'forge.enabledGameTestNamespaces', mod_id
			args '--nogui'
		}

		gameTestServer {
			property 'forge.enabledGameTestNamespaces', mod_id
		}

		data {
			workingDirectory project.file('run-data')
			args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
		}
	}
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
	maven {
		// Create maven
		name = 'tterrag maven'
		url = 'https://maven.tterrag.com/'
	}

	exclusiveContent {
		forRepository {
			maven {
				name = "Modrinth"
				url = "https://api.modrinth.com/maven"
			}
		}
		forRepositories(fg.repository) // Only add this if you're using ForgeGradle, otherwise remove this line
		filter {
			includeGroup "maven.modrinth"
		}
	}
}

dependencies {
	minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
	annotationProcessor "org.spongepowered:mixin:0.8.5:processor"

	// Create
	implementation fg.deobf("com.simibubi.create:create-${minecraft_version}:${create_version}:slim") { transitive = false }
	implementation fg.deobf("com.jozufozu.flywheel:flywheel-forge-${minecraft_version}:${flywheel_version}")
	implementation fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}")

	// Vinery
	implementation fg.deobf("maven.modrinth:lets-do-vinery:${vinery_version}")
	implementation fg.deobf("maven.modrinth:do-api:${do_api_version}")
	implementation fg.deobf("maven.modrinth:architectury-api:${architectury_api_version}")
}

mixin {
	add sourceSets.main, "catgirl_village_addon.refmap.json"
	config "catgirl_village_addon.mixin.json"
	debug.verbose = true
	debug.export = true
}

tasks.named('processResources', ProcessResources).configure {
	var replaceProperties = [
			minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
			forge_version       : forge_version, forge_version_range: forge_version_range,
			loader_version_range: loader_version_range,
			mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
			mod_authors         : mod_authors, mod_description: mod_description,
	]

	inputs.properties replaceProperties
	filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
		expand replaceProperties + [project: project]
	}
}

tasks.named('jar', Jar).configure {
	manifest {
		attributes([
				'Specification-Title'     : mod_id,
				'Specification-Vendor'    : mod_authors,
				'Specification-Version'   : '1', // We are version 1 of ourselves
				'Implementation-Title'    : project.name,
				'Implementation-Version'  : project.jar.archiveVersion,
				'Implementation-Vendor'   : mod_authors,
				'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}

	finalizedBy 'reobfJar'
}

publishing {
	publications {
		register('mavenJava', MavenPublication) {
			artifact jar
		}
	}
	repositories {
		// ...
	}
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
